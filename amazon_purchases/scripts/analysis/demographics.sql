USE amazon;

/*
===================================
Demographic Analysis
===================================
*/


-- Education and race, and age

-- income and order amount; AVG money spent per income group
-- Income q_id = 5
SELECT
	  age_group
	, AVG(purchase_price_per_unit * quantity) AS avg_spent_per_order
FROM silver.amazon_purchases P
INNER JOIN (
	SELECT response_id, answer_text AS age_group
	FROM silver.user_answers UA
	INNER JOIN silver.answers A
		ON UA.answer_id = A.answer_id
		AND q_id = 5
	) age_groups
	ON P.response_id = age_groups.response_id
GROUP BY age_group
;

-- income and popular category
-- think i can shorten this and do the aggregation in the first query tbh
WITH income_category AS (
	SELECT
		  P.response_id
		, A.answer_text AS income_group
		, P.category
	FROM silver.amazon_purchases P
	LEFT JOIN silver.user_answers UA
		ON P.response_id = UA.response_id
		AND UA.q_id = 5
	LEFT JOIN silver.answers A
		ON UA.answer_id = A.answer_id
), rnks AS (
	SELECT
		  income_group
		, category
		, COUNT(response_id) AS num_orders
		, DENSE_RANK() OVER (PARTITION BY income_group ORDER BY COUNT(response_id) DESC) AS rnk
	FROM income_category
	GROUP BY income_group, category
)
SELECT
	  income_group
	, category
	, num_orders
FROM rnks
WHERE rnk <= 3
ORDER BY income_group, num_orders DESC
;


-- ========================================
-- Time Trend Analysis
-- ========================================

-- # of orders per year
-- The dataset page says that the data should be from 2018-2022
SELECT
	  YEAR(order_date) AS order_year
	, COUNT(*) AS num_orders
FROM silver.amazon_purchases
GROUP BY YEAR(order_date)
ORDER BY YEAR(order_date) ASC
;



-- # of orders per month and year sorted by month, year
SELECT
	  FORMAT(order_date, 'yyyy-MMM') AS year_month
	, COUNT(*) AS num_orders
FROM silver.amazon_purchases
GROUP BY FORMAT(order_date, 'yyyy-MMM')
ORDER BY FORMAT(order_date, 'yyyy-MMM')
;

SELECT
	  FORMAT(order_date, 'MMM') AS order_month
	, FORMAT(order_date, 'yyyy') AS order_year
	, COUNT(*) AS num_orders
	, AVG(purchase_price_per_unit * quantity)
FROM silver.amazon_purchases
GROUP BY  MONTH(order_date), FORMAT(order_date, 'MMM'),  FORMAT(order_date, 'yyyy')
ORDER BY MONTH(order_date), order_year
;


/*
===============================================================================
Magnitude Analysis
===============================================================================
*/
-- Total customers by shipping state

-- Total customers by gender

-- Total products by category

-- Average price in each category

-- Total revenue generated for each category

-- Total revenue generated by each customer

-- Total categories bought from by each customer

-- Distribution of customers across states

/*
===============================================================================
Change Over Time Analysis
===============================================================================
DATEPART(), DATETRUNC(), FORMAT()
*/
-- Sales performance over time

/*
===============================================================================
Cumulative Analysis
===============================================================================
Running totals, moving averages; Performance over time cumulatively
*/

/*
===============================================================================
Performance Analysis (Year-over-Year, Month-over-Month)
===============================================================================
Purpose:
    - To measure the performance of products, customers, or regions over time.
    - For benchmarking and identifying high-performing entities.
    - To track yearly trends and growth.

SQL Functions Used:
    - LAG(): Accesses data from previous rows.
    - AVG() OVER(): Computes average values within partitions.
    - CASE: Defines conditional logic for trend analysis.
===============================================================================
*/

/*
===============================================================================
Part-to-Whole Analysis
===============================================================================
Purpose:
    - To compare performance or metrics across dimensions or time periods.
    - To evaluate differences between categories.
    - Useful for A/B testing or regional comparisons.

SQL Functions Used:
    - SUM(), AVG(): Aggregates values for comparison.
    - Window Functions: SUM() OVER() for total calculations.
===============================================================================
*/
-- Which categories contributed the most to overall sales?
